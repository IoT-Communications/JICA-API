scalar Date
scalar Upload

type Query {
  me: User
  getDeviceLocations: DeviceLocationResponse
  login(email: String! password: String! fcmToken: String): Response
  getDeviceTemperatures: DeviceTempResponse
  getDeviceTemperature(deviceID: String!): DeviceTempResponse
  getDeviceHealths: DeviceHealthResponse
  getDeviceHealth(deviceID: String!): DeviceHealthResponse
  getDeviceBatteries: DeviceBatteryResponse
  getDeviceBattery(deviceID: String!): DeviceBatteryResponse
  getDeviceAlarms: DeviceAlarmResponse
  getDeviceAlarm(deviceID: String!): DeviceAlarmResponse
  getDevices: DeviceResponse
  getDevice(deviceID: String!): DeviceResponse
}

type Mutation {
  
  register(username: String! email: String! password: String! fcmToken: String): Response
  
}

type User {
  id: String
  username: String
  email: String
  fcmToken: String
}


type Device {
  deviceID: String
  name: String
  type: String
  firmware: String
}


type DeviceLocation {
  id: Int
  deviceID: String
  latitude: Float
  longitude: Float
  status: String
  timestamp: Date
}

type DeviceAlarm {
  id: Int
  deviceID: String
  state: String
  timestamp: Date
}

type DeviceBattery {
  id: Int
  deviceID: String
  batteryVoltage: Int
  stepNum: Int
  signalStrength: Int
  timestamp: Date
}

type DeviceHealth {
  id: Int
  deviceID: String
  bpHigh: Int
  bpLow: Int
  heartRate: Int
  timestamp: Date
}

type DeviceTemp {
  id: Int
  deviceID: String
  skinTemp: Float
  bodyTemp: Float
  timestamp: Date
}

type Error {
  path: String
  message: String
}

type Response {
  error: Error
  token: String
}


type DeviceResponse {
  error: Error
  device: [Device]
}

type DeviceLocationResponse {
  error: Error
  deviceLocations: [DeviceLocation]
}

type DeviceBatteryResponse {
  error: Error
  deviceBatteries: [DeviceBattery]
}

type DeviceAlarmResponse {
  error: Error
  deviceAlarm: [DeviceAlarm]
}

type DeviceHealthResponse {
  error: Error
  deviceHealth: [DeviceHealth]
}

type DeviceTempResponse {
  error: Error
  deviceTemp: [DeviceTemp]
}

